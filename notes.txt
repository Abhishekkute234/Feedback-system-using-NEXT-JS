STEP 1:-
npx create-next-app@latest -->put this command on terminal to start NEXT JS

STEP 2:-
PS C:\Users\Abhishek\Desktop\Feedback-system-using-NEXT-JS> npx create-next-app@latest
Need to install the following packages:
create-next-app@14.2.15
Ok to proceed? (y) y

√ What is your project named? ... feedback_system
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like to use `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to customize the default import alias (@/*)? ... No / Yes
Creating a new Next.js app in C:\Users\Abhishek\Desktop\Feedback-system-using-NEXT-JS\feedback_system.

STEP 3:-
npm i --> to install all packages
npm run dev --> to run project

STEP 4:- CREATE A SCHEMA OF ALL THE REQUIRED FIELDS YOU WANT 
feedback_system\src\app\model -->create a model folder
npm i mongoose


STEP 5:-
to get unique email address go to
https://regexr.com/ --> community pattern --> search email or any other field yout want
 paste it in schema
  email: 
    type: String,
    required: true,
    unique: true,
    match: [
      /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,
      "Please use a valid email address",
    ],


Step 6:-

create a schema folder 

Step 7 :-

 install library 
npm i zod

follow this git repository 
https://github.com/colinhacks/zod
Type-Safe Validation: Zod automatically infers TypeScript types from your schema, so your validation logic and types are always in sync.
Declarative Schemas: You define schemas in a declarative style, which makes validation rules clear and easy to maintain.
Composability: Zod schemas can be easily composed together, allowing you to build complex validations from smaller parts.
Validation and Parsing: Zod not only checks if the input is valid but also parses the data into the expected format.
Custom Error Messages: You can define custom error messages for better feedback.

Step 8:
create an .env file 
create an .env.sample 


write this in .env
MOGODB_URI=""


Step 9:

create a lib folder 
create a database.ts --> for database connection

write the typescript code in the database.ts file
//


Step 10:- 
RESET email (opt send  email to user) 
->> new regestration 
--> updating an extsting but unverified user with new password and verification code

algorithum

 if extsting then take info 
 if exist but not verified 
 if exit but not verified  and password is same then update password and send email 


STEP 11:-

->go to resend.com 
->create an API key 
->paste it in env file

-->create resend.ts file in lib 
--> go in docs of resend and go to the next js starting template
-->copy it from template
-->paste it in resend.ts file

import type { NextApiRequest, NextApiResponse } from 'next';
// import { EmailTemplate } from '../../components/EmailTemplate';
import { Resend } from 'resend';

export const resend = new Resend(process.env.RESEND_API_KEY);


Step 12:-

https://react.email/docs/integrations/resend go to this website 
--> resend mail 
--> paste the code in   "feedback_system\emails\VerificationEmail.tsx"

import * as React from 'react';
import { Html, Button } from "@react-email/components";

export function Email(props) {
  const { url } = props;

  return (
    <Html lang="en">
      <Button href={url}>Click me</Button>
    </Html>
  );
}

export default Email;


Step 13:-

feedback_system\src\helpers\sendVerificationEmail.ts //in this code there is a logic to  send email 
and the verifictaion code render from the template "feedback_system\emails\VerificationEmail.tsx"


Step 14:-

Create a api folder in src 
--> create a sign-up folder and add routers

npm i bcryptjs
->>bcrypt is a password-hashing function designed to securely store passwords. It helps protect passwords by hashing them before storing them in a database, which makes it difficult for attackers to retrieve the original passwords even if they gain access to the hashed data


Step 15 :- 
for  information of routers go to this gpt link
https://chatgpt.com/share/670ba261-b2ec-8008-89a4-47e724a03af9


step 16:-

NEXT AUTH 

1.search next auth 
2.go to the documenatation
3.Crate a folder structure as the documentation say

4. https://next-auth.js.org/providers/github go here ands take any provider your want  to use

5.go to the credentail (ID ansd password)
6. write all the logic in the option.ts

7. NEXTAUTH_SECRET="" //add to the next auth  secret in the .env file


step 17:- MIDDLEWARE

https://next-auth.js.org/configuration/nextjs#middleware
1.go to the middleware and gave the command to render the templates and all (follo the feedback_system\src\middleware.ts ) file 
for more infromation
